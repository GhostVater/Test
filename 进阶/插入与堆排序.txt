using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Test0001
{
    class Program
    {
        static int Main(string[] args)
        {
            Console.ReadLine();
            string str1 = Console.ReadLine();
            string[] str2 = Console.ReadLine().Split(' ');
            InsertionSort(str1.Split(' '), str2);
            HeapSort(str1.Split(' '), str2);
            return 0;
        }
        static void InsertionSort(string[] ls, string[] cs)
        {
            int n = ls.Length;
            bool isok = false;
            for (int i = 0; i < n; ++i)
            {
                string si = ls[i];
                int vi = int.Parse(si);
                int j = i - 1;

                for (; j >= 0; --j)
                {
                    if (vi >= int.Parse(ls[j])) break;
                    ls[j + 1] = ls[j];
                }

                ls[j + 1] = si;

                if (isok) break;
                isok = LsCompare(ls, cs);
            }

            if (isok)
            {
                Console.WriteLine("Insertion Sort");
                Console.WriteLine(String.Join(" ", ls));
            }
        }

        public static void DownSort(string[] ls, int x, int n)
        {
            int p = x * 2 + 1;
            while (p <= n)
            {
                if (p < n && int.Parse(ls[p]) < int.Parse(ls[p + 1])) p ++;
                if (int.Parse(ls[x]) < int.Parse(ls[p])) Swap(ls, x, p);
                x = p;
                p = p * 2 + 1;
            }
        }
        public static void Swap(string[] ls, int x, int y)
        {
            var t = ls[x];
            ls[x] = ls[y];
            ls[y] = t;
        }
        public static void HeapSort(string[] ls, string[] cs)
        {
            int n = ls.Length;
            bool isok = false;
            for (int i = n / 2; i >= 0; --i)
            {
                DownSort(ls, i, n - 1);
            }
            for (int i = n - 1; i > 0; --i)
            {
                Swap(ls, i, 0);
                DownSort(ls, 0, i - 1);
                if (isok) break;
                isok = LsCompare(ls, cs);
            }
            if (isok)
            {
                Console.WriteLine("Heap Sort");
                Console.WriteLine(String.Join(" ", ls));
            }
        }
        static bool LsCompare(string[] ls, string[] cs)
        {
            if (ls.Length != cs.Length) return false;
            for (int i = 0; i < cs.Length; i++)
            {
                if (ls[i] != cs[i]) return false;
            }
            return true;
        }

    }
}