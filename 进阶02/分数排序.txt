using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;


namespace Test0001
{
    class Program
    {
        public static int N, M;
        public static void Main(string[] args)
        {
            var str1 = Console.ReadLine().Trim().Split(' ');
            N = int.Parse(str1[0]);
            M = int.Parse(str1[1]);
            for (int i = 0; i < N; i++)
            {
                new Student(Console.ReadLine());
            }
            Student.StuRank();//对学生进行排名

            for (int i = 0; i < M; i++)
            {
                string id = Console.ReadLine().Trim();
                if (Student.stuDict.ContainsKey(id))
                {
                    Student.stuDict[id].Print();
                }
                else
                {
                    Console.WriteLine("N/A");
                }
            }

        }
    }

    class Student
    {
        public string id;
        public int C;
        public int M;
        public int E;
        public int A;

        public string result;//最优成绩
        public int rank;//最优成绩的排名
        public int[] ranks = new int[4];//四个排名

        public static Dictionary<string, Student> stuDict = new Dictionary<string, Student>();
        public static string[] res = new string[] { "A", "C", "M", "E" };
        public static List<Student> ARank = new List<Student>();
        public static List<Student> CRank = new List<Student>();
        public static List<Student> MRank = new List<Student>();
        public static List<Student> ERank = new List<Student>();
        public Student(string str)
        {
            var value = str.Trim().Split(' ');
            id = value[0];
            C = int.Parse(value[1]);
            M = int.Parse(value[2]);
            E = int.Parse(value[3]);
            A = (C + M + E) / 3;
            stuDict.Add(id, this);
        }

        /// <summary>
        /// 最擅长的科目(如果有通分则按照排名靠前取得)
        /// </summary>
        public void ToResult()
        {
            this.rank = ranks.Min();
            for (int i = 0; i < ranks.Length; i++)
            {
                if (ranks[i] == this.rank)
                {
                    this.result = res[i];
                    break;
                }
            }
        }
        public void Print()
        {
            Console.WriteLine(rank + " " + result);
        }

        public static void StuRank()
        {
            //各科分数从高到低排序
            ARank = stuDict.Values.OrderByDescending(x => x.A).ToList();
            CRank = ARank.OrderByDescending(x => x.C).ToList();
            MRank = ARank.OrderByDescending(x => x.M).ToList();
            ERank = ARank.OrderByDescending(x => x.E).ToList();
            ARank[0].ranks[0] = 1;
            CRank[0].ranks[1] = 1;
            MRank[0].ranks[2] = 1;
            ERank[0].ranks[3] = 1;
            int a = 1, c = 1, m = 1, e = 1;//前一名的成绩
            //通分排名相同

            for (int i = 1; i < ARank.Count; i++)
            {
                if (ARank[i].A != ARank[i - 1].A)
                {
                    a = i + 1;
                }
                ARank[i].ranks[0] = a;

                if (CRank[i].C != CRank[i - 1].C)
                {
                    c = i + 1;
                }
                CRank[i].ranks[1] = c;

                if (MRank[i].M != MRank[i - 1].M)
                {
                    m = i + 1;
                }
                MRank[i].ranks[2] = m;

                if (ERank[i].E != ERank[i - 1].E)
                {
                    e = i + 1;
                }
                ERank[i].ranks[3] = e;
            }
            foreach (var stu in stuDict.Values)
            {
                stu.ToResult();
            }
        }
    }
}