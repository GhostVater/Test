//首先对前17位数字加权求和，权重分配为：{7,9 ，10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};然后将计算的和对11模取得
//到值z者除外; 最后按照以下关系对应z值与校验码m的值：
//z：0 1 2 3 4 5 6 7 8 9 10 
//m：1 0 x 9 8 7 6 5 4 3 2 
//现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。

//输入描述：
//输入第一行给出正整数n（<= 100）是输入的身份证号码的个数。随后n行，每行给出1个18位身份证号码。


//输出描述：
//按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，

//则输出“全部通过”。
//示例1
//输入
//4
//320124198808240056
//12010x198901011234
//110108196711301866
//37070419881216001x
//输出
//12010x198901011234
//110108196711301866
//37070419881216001x

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Test0001
{
    class Program
    {
        static int Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            List<IDCard> idList = new List<IDCard>();
            for (int i = 0; i < n; i++)
            {
                idList.Add(new IDCard(Console.ReadLine()));
            }
            bool isPass = true;
            foreach (var item in idList)
            {
                if (!item.isPass)
                {
                    Console.WriteLine(item.id);
                    isPass = false;
                }
            }
            if (isPass)//全通过
            {
                Console.WriteLine("All passed");
            }
            return 0;
        }
    }
    class IDCard
    {
        /// <summary>
        /// 权重
        /// </summary>
        public static int[] weights = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 };
      
        /// <summary>
        /// 校验码
        /// </summary>
        public static Dictionary<int, char> checkDict = new Dictionary<int, char>() { { 0, '1' }, { 1, '0' }, { 2, 'X' }, { 3, '9' }, { 4, '8' }, { 5, '7' }, { 6, '6' }, { 7, '5' }, { 8, '4' }, { 9, '3' }, { 10, '2' } };

        public string id;
        public bool isPass = false;
        public IDCard(string id)
        {
            this.id = id;
            GetPass();
        }

        void GetPass()
        {
            int q = 0;
            for (int i = 0; i < id.Length-1; i++)
            {
                if (!int.TryParse(id[i].ToString(),out int a))
                {
                    return;
                }
                q += a * weights[i];
            }
            if (checkDict[q % 11] == id[id.Length-1])
            {
                isPass = true;
            }
        }
    }
}